---

name: molecule-ci

on:
  workflow_call:
    inputs:
      scenario_name:
        description: Scenario to run for this molecule test
        type: string
        required: true
      houdini_role_pre_script:
        description: Execute this role specific logic before starting the molecule test run
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.12"

permissions:
  contents: read

jobs:
  molecule-ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Houdini-Role Pre-Run Script
        if: ${{ inputs.houdini_role_pre_script }}
        run: |
          sed -i "s/client_id='your OAuth application ID'/client_id='${{ secrets.SIDEFX_CLIENT_ID }}'/g" ./scripts/api_download.py
          sed -i "s/client_secret_key='your OAuth application secret'/client_secret_key='${{ secrets.SIDEFX_CLIENT_SECRET }}'/g" ./scripts/api_download.py

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Install Ansible dependencies
        run: |
          if [ -f requirements.yml ]; then ansible-galaxy install -r requirements.yml; fi

      - name: Check for submodules and install dependencies
        shell: bash
        run: |
          # Initialize and update submodules if .gitmodules exists
          if [ -f .gitmodules ]; then
            git submodule update --init --recursive
            # Extract submodule paths from .gitmodules
            SUBMODULE_PATHS=$(git config --file .gitmodules --get-regexp path | awk '{ print $2 }')
            for submodule in $SUBMODULE_PATHS; do
              echo "Processing submodule: $submodule"
              if [ -f "$submodule/requirements.txt" ]; then
                echo "Installing Python dependencies for $submodule"
                pip install -r "$submodule/requirements.txt"
              fi
              if [ -f "$submodule/requirements.yml" ]; then
                echo "Installing Ansible dependencies for $submodule"
                ansible-galaxy install -r "$submodule/requirements.yml"
              fi
            done
          else
            echo "No submodules found."
          fi

      - name: Set environment variables for VirtualBox
        run: |
          echo "LOGNAME=$USER" >> $GITHUB_ENV
          echo "USER=$(whoami)" >> $GITHUB_ENV

      - name: Install Virtualbox 7.1.X
        run: |
          sudo sh -c 'echo "deb [arch=amd64 signed-by=/usr/share/keyrings/oracle-virtualbox-2016.gpg] https://download.virtualbox.org/virtualbox/debian $(lsb_release -sc) contrib" >> /etc/apt/sources.list'
          wget -O- https://www.virtualbox.org/download/oracle_vbox_2016.asc | sudo gpg --yes --output /usr/share/keyrings/oracle-virtualbox-2016.gpg --dearmor
          sudo apt-get update
          sudo apt-get install virtualbox-7.1 -y

      - name: Verify VirtualBox installation
        run: VBoxManage --version

      - name: Install vagrant
        run: |
          # Get vagrant gpg key
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update
          sudo apt-get install vagrant -y

      - name: Verify Vagrant installation
        run: vagrant --version

      - name: Run molecule test
        run: |
          molecule test -s ${{ inputs.scenario_name }}

...
